@startuml
!include style.puml
skinparam ArrowFontStyle plain

actor "User" as User
participant ":UI" as UI #Green
participant ":LogicManager" as LM #Blue
participant ":AddressBookParser" as ABP #Blue
participant ":AddCommandParser" as AddCommandParser #Blue
participant ":ParserUtil" as ParserUtil #Blue
participant "a:AddCommand" as AddCommand #Blue
participant ":Model" as Model #Red
participant ":ConfirmationManager" as ConfirmationManager #Blue
participant "r:CommandResult" as CommandResult #DarkRed
participant ":Storage" as Storage #Orange

User -> UI: "add n/John Doe ..."
UI -> LM: execute("add n/John Doe ...")
activate LM

LM -> ABP: parseCommand("add n/John Doe ...")
activate ABP
ABP -> "AddCommandParser": parse(arguments)
activate "AddCommandParser"

"AddCommandParser" -> "AddCommandParser": ArgumentTokenizer.tokenize(args, prefixes)
"AddCommandParser" -> "AddCommandParser": arePrefixesPresent(argMultimap, prefixes)
"AddCommandParser" -> "AddCommandParser": verifyNoDuplicatePrefixesFor(prefixes)

"AddCommandParser" -> ParserUtil: parseName(name)
activate ParserUtil
ParserUtil --> "AddCommandParser": name
deactivate ParserUtil

"AddCommandParser" -> ParserUtil: parsePhone(phone)
activate ParserUtil
ParserUtil --> "AddCommandParser": phone
deactivate ParserUtil

"AddCommandParser" -> ParserUtil: parseEmail(email)
activate ParserUtil
ParserUtil --> "AddCommandParser": email
deactivate ParserUtil

"AddCommandParser" -> ParserUtil: parseRole(role)
activate ParserUtil
ParserUtil --> "AddCommandParser": role
deactivate ParserUtil

"AddCommandParser" -> ParserUtil: parseAddress(address)
activate ParserUtil
ParserUtil --> "AddCommandParser": address
deactivate ParserUtil

"AddCommandParser" -> "Person": new Person(name, phone, email, role, address, new HashSet<>())
activate "Person"
"Person" --> "AddCommandParser": person
deactivate "Person"

"AddCommandParser" -> "AddCommand": new AddCommand(person)
activate "AddCommand"
"AddCommand" --> "AddCommandParser"
deactivate "AddCommand"

"AddCommandParser" --> ABP: a
deactivate "AddCommandParser"

ABP --> LM: a
deactivate ABP

LM -> "AddCommand": execute(model)
activate "AddCommand"

"AddCommand" -> Model: hasPerson(toAdd)
activate Model
Model --> "AddCommand": personExists
deactivate Model

alt person exists and !isForced
    "AddCommand" -> ConfirmationManager: getInstance().setPendingCommand(this)
    activate ConfirmationManager
    ConfirmationManager --> "AddCommand"
    deactivate ConfirmationManager

    "AddCommand" -> CommandResult: new CommandResult(MESSAGE_DUPLICATE_PERSON, false, false, true)
    activate CommandResult
    "CommandResult" --> "AddCommand"
    deactivate CommandResult
else person doesn't exist or isForced
    alt isForced
        "AddCommand" -> Model: forceAddPerson(toAdd)
        activate Model
        Model --> "AddCommand"
        deactivate Model
    else
        "AddCommand" -> Model: addPerson(toAdd)
        activate Model
        Model --> "AddCommand"
        deactivate Model
    end

    "AddCommand" -> CommandResult: new CommandResult(successMessage)
    activate CommandResult
    "CommandResult" --> "AddCommand"
    deactivate CommandResult
end

"AddCommand" --> LM: r
deactivate "AddCommand"

alt regular command success (not requiring confirmation)
    LM -> Storage: saveAddressBook(Model.getAddressBook())
    activate Storage
    Storage --> LM: Save successful
    deactivate Storage
end

LM -> UI: return CommandResult
deactivate LM
UI -> User: Display appropriate message
@enduml